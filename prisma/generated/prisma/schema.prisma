// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "./generated/prisma"
  previewFeatures = ["clientExtensions"]
  binaryTargets   = ["native"]
  engineType      = "binary"
  // ðŸ‘‡ This is the key part for ESM:
  useModules      = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int      @id @default(autoincrement())
  username             String   @unique
  email                String   @unique
  password             String
  role                 Role     @default(USER)
  isVerified           Boolean  @default(false)
  stripeCustomerId     String?
  stripeSubscriptionId String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  posts        Post[]
  sessions     Session[]
  payments     Payment[]
  subscription Subscription?
}

model Session {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id          Int           @id @default(autoincrement())
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  amount      Int
  currency    String
  status      PaymentStatus
  provider    String
  referenceId String
  createdAt   DateTime      @default(now())
}

model Subscription {
  id                Int                @id @default(autoincrement())
  user              User               @relation(fields: [userId], references: [id])
  userId            Int                @unique
  plan              String
  status            SubscriptionStatus
  startedAt         DateTime           @default(now())
  currentPeriodEnd  DateTime
  cancelAtPeriodEnd Boolean            @default(false)
}

enum Role {
  USER
  ADMIN
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  TRIALING
  INCOMPLETE
}
